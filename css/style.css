--- START OF FILE style.css ---
/* style.css */
:root {
    --motion-color: #43D3FF;
    --triggering-color: #FFEC80;
    --looks-color: #D38BD6;
    --sound-color: green;
    --control-color: orange;
    --end-color: red;
}

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f0f4ff;
    direction: ltr; /* Make sure direction is LTR */
}

.container {
    display: flex;
    flex-direction: column;
    height: 100vh;
}

header {
    background-color: #fff;
    padding: 10px 20px;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #e0e0e0;
}

main {
    display: flex;
    flex-direction: column;
    flex-grow: 1;
}

.stage-container {
    flex: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 10px;
}

#stage {
    flex: 0 0 auto;
    width: 550px;
    height: 450px;
    background-color: #f5f5f5;
    border: 1px solid #e0e0e0;
    border-radius: 10px;
    position: relative;
    gap: 1px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

#stage::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    background: none;
}

#stage.show-grid::before {
    background: none;
}

#stage.show-grid {
  background-image:
    linear-gradient(to right, lightgrey 1px, transparent 1px),
    linear-gradient(to bottom, lightgrey 1px, transparent 1px);
  background-size: 56px 46px; /* Set the size of the grid lines */
  background-position: top left; /* Align the grid to the top left */
}

#character {
    width: 100px;
    height: 100px;
    position: absolute;
    object-fit: contain;
    cursor: grab;
    transition: all 0.1s ease-out;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.palette-and-programming {
    display: flex;
    flex-direction: column;
    flex: 1;
}

#block-palette {
    background-color: #f0f0f0; /* Gray background as requested */
    border: 1px solid #e0e0e0;
    margin: 10px;
    padding: 10px;
    border-radius: 10px;
    height: 105px; /* Fixed height of 114px as requested */
    display: flex;
    flex-direction: row;
    align-items: stretch;
    overflow: hidden; /* Prevent content from overflowing */
}

.category-tabs {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    margin-bottom: 0;
    height: 100%;
    align-content: flex-start;
    background-color: #f0f0f0; /* Gray background behind tabs */
}

.category-tab {
    border: none;
    padding: 0;
    margin-left: 5px;
    margin-bottom: 5px;
    border-radius: 10px;
    cursor: pointer;
    font-size: 16px;
    color: #000000;
    width: 80px;
    height: 80px;
    display: flex;
    justify-content: center;
    align-items: center;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.3);
    border-bottom: 2px solid rgba(0, 0, 0, 0.1);
}

.category-tab img {
    max-width: 60%;
    max-height: 60%;
    pointer-events: none;
    filter: invert(100%);
}

.category-tab[data-category="triggering"] {
    background-color: var(--triggering-color);
}

.category-tab[data-category="motion"] {
    background-color: var(--motion-color);
}

.category-tab[data-category="looks"] {
    background-color: var(--looks-color);
}

.category-tab[data-category="sound"] {
    background-color: var(--sound-color);
}

.category-tab[data-category="control"] {
    background-color: var(--control-color);
}

.category-tab[data-category="end"] {
    background-color: var(--end-color);
}

.block-category {
    display: none;
    padding: 10px;
    flex-grow: 1;
    height: 100%;
    border-right: 1px solid #e0e0e0;
    margin-left: 10px;
    background-color: #0D66CA; /* blue background behind programming blocks */
}

.block-category.active {
    display: flex;
    flex-wrap: wrap;
    padding: 10px;
}

#programming-area {
    background-color: #fff;
    border: 1px solid #e0e0e0;
    margin: 10px;
    padding: 10px;
    border-radius: 10px;
    flex: 2; /* Increased to make programming area taller */
    min-height: 200px; /* Set minimum height */
}

.program-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
}

#clear-all {
    color: #e74c3c;
    cursor: pointer;
}

#program-blocks {
    min-height: 180px; /* Increased height */
    border: 1px dashed #ccc;
    padding: 10px;
    position: relative;
}

#program-blocks .block-container {
    position: absolute;
}

.logo {
    font-size: 20px;
    font-weight: bold;
    color: #4a90e2;
}

.header-icons {
    display: flex;
}

.icon {
    margin-left: 10px;
    font-size: 24px;
    color: #999;
    cursor: pointer;
}

#block-palette .block-container,
#programming-area .block-container {
    position: relative;
    width: 100px;
    height: 100px;
    margin: 4px;
    cursor: pointer;
    background-color: transparent;
}

#block-palette .scratch-block,
#programming-area .scratch-block {
    position: relative;
    width: 70px;
    height: 80px;
    background-color: #ffff00;
    border-radius: 10px;
    display: flex;
    justify-content: center;
    align-items: center;
    color: black;
    font-size: 24px; /* Removed font-size */
    font-weight: bold; /* Removed font-weight */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2), inset 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform 0.2s ease-in-out, background-color 0.2s ease-in-out;
    overflow: hidden; /* Ensure image stays within block */
}

#block-palette .scratch-block::after,
#programming-area .scratch-block::after {
    content: '';
    position: absolute;
    right: -14px;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    background-color: inherit;
    border-radius: 50%;
}

#block-palette .scratch-block::before,
#programming-area .scratch-block::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 18px;
    height: 18px;
    background-color: #f0f4ff;
    border-radius: 50%;
}

.block-icon {
    width: 50px;
    height: 50px;
    display: flex;
    justify-content: center;
    align-items: center;
    margin-right: 5px;
}

.block-icon svg {
    width: 200%;
    height: 200%;
}

#triggering-blocks .block-container .scratch-block {
    background-color: var(--triggering-color);
}

#motion-blocks .block-container .scratch-block {
    background-color: var(--motion-color);
}

#looks-blocks .block-container .scratch-block {
    background-color: var(--looks-color);
}

#sound-blocks .block-container .scratch-block {
    background-color: var(--sound-color);
}

#control-blocks .block-container .scratch-block {
    background-color: var(--control-color);
}

#end-blocks .block-container .scratch-block {
    background-color: var(--end-color);
}

#grid-toggle {
    margin-left: 10px;
    font-size: 16px;
    color: #999;
    cursor: pointer;
    border: 1px solid #ccc;
    padding: 5px 10px;
    border-radius: 5px;
}

#grid-toggle:hover {
    background-color: #f0f0f0;
}
--- START OF FILE script.js ---
 // ========================================================================
// הגדרת בלוקים (Blocks)
// ========================================================================

const blocks = {
    triggering: [
        {
            name: "When Green Flag",
            color: "yellow",
            type: "startOnGreenFlag",
            icon: "assets/images/blocks/flag.svg",
        },
        {
            name: "On Tap",
            color: "yellow",
            type: "startOnTap",
            icon: "assets/images/blocks/tap.svg",
        },
        {
            name: "On Bump",
            color: "yellow",
            type: "startOnBump",
            icon: "assets/images/blocks/bump.svg",
        },
        {
            name: "Send Message",
            color: "yellow",
            type: "sendMessage",
            icon: "assets/images/blocks/send_message.svg",
        },
        {
            name: "Receive Message",
            color: "yellow",
            type: "startOnMessage",
            icon: "assets/images/blocks/receive_message.svg",
        },
    ],
    motion: [
        {
            name: "Move Right",
            color: "#43D3FF",
            type: "moveRight",
            icon: "assets/images/blocks/move_right.svg",
        },
        {
            name: "Move Left",
            color: "#43D3FF",
            type: "moveLeft",
            icon: "assets/images/blocks/move_left.svg",
        },
        {
            name: "Move Up",
            color: "#43D3FF",
            type: "moveUp",
            icon: "assets/images/blocks/move_up.svg",
        },
        {
            name: "Move Down",
            color: "#43D3FF",
            type: "moveDown",
            icon: "assets/images/blocks/move_down.svg",
        },
        {
            name: "Turn Right",
            color: "#43D3FF",
            type: "turnRight",
            icon: "assets/images/blocks/turn_right.svg",
        },
        {
            name: "Turn Left",
            color: "#43D3FF",
            type: "turnLeft",
            icon: "assets/images/blocks/turn_left.svg",
        },
        {
            name: "Hop",
            color: "#43D3FF",
            type: "hop",
            icon: "assets/images/blocks/hop.svg",
        },
        {
            name: "Go Home",
            color: "#43D3FF",
            type: "goHome",
            icon: "assets/images/blocks/go_home.svg",
        },
    ],
    looks: [
        {
            name: "Say",
            color: "purple",
            type: "say",
            icon: "assets/images/blocks/say.svg",
        },
        {
            name: "Grow",
            color: "purple",
            type: "grow",
            icon: "assets/images/blocks/grow.svg",
        },
        {
            name: "Shrink",
            color: "purple",
            type: "shrink",
            icon: "assets/images/blocks/shrink.svg",
        },
        {
            name: "Reset Size",
            color: "purple",
            type: "resetSize",
            icon: "assets/images/blocks/reset_size.svg",
        },
        {
            name: "Hide",
            color: "purple",
            type: "hide",
            icon: "assets/images/blocks/hide.svg",
        },
        {
            name: "Show",
            color: "purple",
            type: "show",
            icon: "assets/images/blocks/show.svg",
        },
    ],
    sound: [
        {
            name: "Pop Sound",
            color: "green",
            type: "popSound",
            icon: "assets/images/blocks/pop_sound.svg",
        },
        {
            name: "Play Recorded Sound",
            color: "green",
            type: "playRecordedSound",
            icon: "assets/images/blocks/record_sound.svg",
        },
    ],
    control: [
        {
            name: "Wait",
            color: "orange",
            type: "wait",
            icon: "assets/images/blocks/wait.svg",
        },
        {
            name: "Set Speed",
            color: "orange",
            type: "setSpeed",
            icon: "assets/images/blocks/speed.svg",
        },
        {
            name: "Repeat",
            type: "repeat",
            icon: "assets/images/blocks/repeat.svg",
            color: "orange"
        },
        {
            name: "Repeat Forever",
            type: "repeatForever",
            icon: "assets/images/blocks/repeat_forever.svg",
            color: "orange"
        },
        {
            name: "Go To Page",
            color: "orange",
            type: "goToPage",
            icon: "assets/images/blocks/go_to_page.svg",
        },
    ],
    end: [
        {
            name: "Stop",
            color: "red",
            type: "stop",
            icon: "assets/images/blocks/stop.svg",
        },
        {
            name: "End",
            color: "red",
            type: "end",
            icon: "assets/images/blocks/end.svg",
        },
    ],
};

// ========================================================================
// פונקציות ליצירת אלמנטים
// ========================================================================

// פונקציה ליצירת מחבר ימני
function createRightConnector(color) {
    const rightConnector = document.createElement("div");
    rightConnector.classList.add("right-connector");
    rightConnector.style.backgroundColor = color;
    return rightConnector;
}

// פונקציה ליצירת מחבר שמאלי
function createLeftConnector() {
    const leftConnectorWrapper = document.createElement("div");
    leftConnectorWrapper.classList.add("left-connector-wrapper");

    const leftConnector = document.createElement("div");
    leftConnector.classList.add("left-connector");

    leftConnectorWrapper.appendChild(leftConnector);
    return leftConnectorWrapper;
}

// פונקציה ליצירת בלוק גרפי
function createScratchBlock(block) {
    const scratchBlock = document.createElement("div");
    scratchBlock.classList.add("scratch-block");
    scratchBlock.style.backgroundColor = block.color;

    const iconElement = document.createElement('img');
    iconElement.src = block.icon;
    iconElement.alt = block.name; // Add alt text for accessibility
    scratchBlock.appendChild(iconElement);

    return scratchBlock;
}

// פונקציה ליצירת HTML עבור בלוק
function createBlockElement(block, category) {
    const blockContainer = document.createElement("div");
    blockContainer.classList.add("block-container");

    const scratchBlock = createScratchBlock(block);
    const rightConnector = createRightConnector(block.color);
    const leftConnectorWrapper = createLeftConnector();

    blockContainer.appendChild(scratchBlock);
    blockContainer.appendChild(rightConnector);
    blockContainer.appendChild(leftConnectorWrapper);

    blockContainer.dataset.type = block.type;
    blockContainer.draggable = true;

    // טיפול באירוע התחלת גרירה (dragstart)
    blockContainer.addEventListener("dragstart", (event) => {
        handleDragStart(event, block, category);
    });

    return blockContainer;
}

// ========================================================================
// פונקציות טיפול באירועים
// ========================================================================

// פונקציה לטיפול בהתחלת גרירה
function handleDragStart(event, block, category) {
    const data = {
        type: block.type,
        icon: block.icon,
        color: block.color,
        category: category
    };
    event.dataTransfer.setData("text/plain", JSON.stringify(data));
    event.dataTransfer.effectAllowed = "move";
}

// פונקציה לטיפול בשחרור באזור התכנות
function handleDrop(event) {
    event.preventDefault();

    const data = JSON.parse(event.dataTransfer.getData("text/plain"));
    const blockType = data.type;
    const blockCategory = data.category;
    const blockIcon = data.icon;
    const blockColor = data.color;

    // יצירת אלמנט בלוק חדש (שיבוט)
    const newBlock = document.createElement("div");
    newBlock.classList.add("block-container");

    const scratchBlock = document.createElement("div");
    scratchBlock.classList.add("scratch-block");
    scratchBlock.style.backgroundColor = blockColor;

    const iconElement = document.createElement('img');
    iconElement.src = blockIcon;
    iconElement.alt = blockType; // Use block type as alt text
    scratchBlock.appendChild(iconElement);


    //יצירת אלמנט right-connector
    const rightConnector = document.createElement("div");
    rightConnector.classList.add("right-connector");
    rightConnector.style.backgroundColor = blockColor;

    //יצירת אלמנט left-connector-wrapper
    const leftConnectorWrapper = document.createElement("div");
    leftConnectorWrapper.classList.add("left-connector-wrapper");

     //יצירת אלמנט left-connector
    const leftConnector = document.createElement("div");
    leftConnector.classList.add("left-connector");

    leftConnectorWrapper.appendChild(leftConnector);

    // הוספת הכל ל container
    newBlock.appendChild(scratchBlock);
    newBlock.appendChild(rightConnector);
    newBlock.appendChild(leftConnectorWrapper);
    newBlock.dataset.type = blockType;
    newBlock.draggable = false;

    // הוספת הבלוק החדש לאזור התכנות
    programmingArea.appendChild(newBlock);

    // מיקום הבלוק החדש יחסי לאזור התכנות
    const rect = programmingArea.getBoundingClientRect();
    newBlock.style.position = "absolute";
    newBlock.style.left = `${event.clientX - rect.left}px`;
    newBlock.style.top = `${event.clientY - rect.top}px`;
}

// ========================================================================
// פונקציות אתחול
// ========================================================================

// הוספת הבלוקים ללוח הלבנים
function populateBlockPalette(category) {
    const categoryDiv = document.getElementById(`${category}-blocks`);
    categoryDiv.innerHTML = "";

    blocks[category].forEach(block => {
        const blockElement = createBlockElement(block, category);
        categoryDiv.appendChild(blockElement);
    });
}

// פונקציה לטיפול בשינוי קטגוריה
function handleCategoryChange(category) {
    blockCategories.forEach(element => element.classList.remove("active"));
    categoryTabs.forEach(tab => tab.classList.remove("active"));

    const tab = document.querySelector(`.category-tab[data-category="${category}"]`);
    tab.classList.add("active");
    document.getElementById(`${category}-blocks`).classList.add("active");
    populateBlockPalette(category);
}

// ========================================================================
//  לוגיקת גרירה ושחרור (Drag and Drop)
// ========================================================================

const programmingArea = document.getElementById("program-blocks");

// טיפול באירוע גרירה מעל אזור התכנות (dragover)
programmingArea.addEventListener("dragover", (event) => {
    event.preventDefault();
    event.dataTransfer.dropEffect = "move";
});

// טיפול באירוע שחרור באזור התכנות (drop)
programmingArea.addEventListener("drop", handleDrop);

const categoryTabs = document.querySelectorAll(".category-tab");
const blockCategories = document.querySelectorAll(".block-category");

categoryTabs.forEach(tab => {
    tab.addEventListener("click", () => {
        const category = tab.dataset.category;
        handleCategoryChange(category);
    });
});

// הוספת כפתור קווי GRID
const gridToggle = document.getElementById("grid-toggle");
const stage = document.getElementById("stage");

gridToggle.addEventListener("click", () => {
    stage.classList.toggle("show-grid");
});

// אתחול הלוח עם הקטגוריה הפעילה הראשונה
populateBlockPalette("triggering");

// ========================================================================
// גרירה של הדמות
// ========================================================================

const character = document.getElementById('character');

character.addEventListener('dragstart', (event) => {
    event.dataTransfer.setData('text/plain', ''); // Required for drag to work in Firefox
});

stage.addEventListener('dragover', (event) => {
    event.preventDefault(); // Allow drop
});

stage.addEventListener('drop', (event) => {
    event.preventDefault();

    const stageRect = stage.getBoundingClientRect();
    const characterWidth = character.offsetWidth;
    const characterHeight = character.offsetHeight;

    let x = event.clientX - stageRect.left - characterWidth / 2;
    let y = event.clientY - stageRect.top - characterHeight / 2;

    // Stay within stage bounds
    x = Math.max(0, Math.min(x, stageRect.width - characterWidth));
    y = Math.max(0, Math.min(y, stageRect.height - characterHeight));

    character.style.left = x + 'px';
    character.style.top = y + 'px';
});
